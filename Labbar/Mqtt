package comcun;

import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import java.util.Timer;
import java.util.TimerTask;

public class Temp {

    Temp() throws InterruptedException {
        sendTemp();
    }

    Timer timer;
    String topic        = "topic/Jun8";
    //String content      = printTemp();
    int qos             = 2;
    String broker       = "tcp://broker.hivemq.com:1883";
    String clientId     = "JavaSample";
    MemoryPersistence persistence = new MemoryPersistence();

    void sendTemp() {
        try {
            MqttClient sampleClient = new MqttClient(broker, clientId, persistence);
            MqttConnectOptions connOpts = new MqttConnectOptions();
            connOpts.setCleanSession(true);
            System.out.println("Connecting to broker: " + broker);
            sampleClient.connect(connOpts);
            System.out.println("Connected");
            System.out.println("Publishing message: " + printTemp());
            MqttMessage message = new MqttMessage(printTemp().getBytes());
            message.setQos(qos);
            sampleClient.publish(topic, message);
            sampleClient.subscribe(topic, new Mqtt.MqttPostPropertyMessageListener());
            //System.out.println("Message published");
            //sampleClient.disconnect();
            //System.out.println("Disconnected");
            //System.exit(0);
        } catch (MqttException me) {
            me.printStackTrace();
        }
    }

    void test(int seconds) {
        timer = new Timer();
        timer.schedule(new Temp.RemindTask(), seconds*1000);
    }


    class RemindTask extends TimerTask {
        public void run() {
            sendTemp();
            timer.cancel(); //Terminate the timer thread
            test(10);
        }
    }



    public String printTemp() {
        while (true) {
            int t = ((int) (Math.random() * (25 - 15) + 15));
            System.out.println(t + " Â°C");
        }
    }

    class MqttPostPropertyMessageListener implements IMqttMessageListener {
        @Override
        public void messageArrived(String var1, MqttMessage var2) throws Exception {
            System.out.println(var1 + ": " + var2.toString());

        }
    }


    public static void main(String[] args) throws InterruptedException {
        new Temp();
    }

}
